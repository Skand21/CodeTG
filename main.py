from gigachat import GigaChat
import telebot
from telebot import types
import requests
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
botTimeWeb = telebot.TeleBot('7463534277:AAHZ29LmrJIwzFTPmJ5h-s1UzmjJ3Brzoi4')

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_status = {}  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç.–¥.)
user_scores = {}  # –ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ—Å—Ç
current_question_index = {}  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ—Å—Ç–µ

# –ü—Ä–æ–º–ø—Ç –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Docs
google_docs_url = "https://docs.google.com/document/d/1itjBPTT3Dhw1ANRsw_Q8OtiyFl2hSK7RqX9Ogp4NCUQ/edit?usp=sharing"
prompt_text = ""  # –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Google Docs

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ Google Docs
def load_prompt(url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ Google Docs."""
    match_ = re.search('/document/d/([a-zA-Z0-9-_]+)', url)
    if match_ is None:
        raise ValueError('Invalid Google Docs URL')
    doc_id = match_.group(1)

    try:
        response = requests.get(f'https://docs.google.com/document/d/{doc_id}/export?format=txt')
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return ""

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
prompt_text = load_prompt(google_docs_url)

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
questions = [
    {"text": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ C++?", "correct": "true", "answers": [
        {"text": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —ç—Ç–æ –º–µ—Å—Ç–æ –≤ –ø–∞–º—è—Ç–∏, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ", "callback_data": "true"},
        {"text": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "callback_data": "false"},
        {"text": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö", "callback_data": "false"},
        {"text": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —ç—Ç–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ —Ñ—É–Ω–∫—Ü–∏—è", "callback_data": "false"},
    ]},
    {"text": "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤ C++?", "correct": "true", "answers": [
        {"text": "int", "callback_data": "true"},
        {"text": "char", "callback_data": "false"},
        {"text": "float", "callback_data": "false"},
        {"text": "bool", "callback_data": "false"},
    ]},
    {"text": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä '==' –≤ C++?", "correct": "true", "answers": [
        {"text": "–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è", "callback_data": "false"},
        {"text": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ", "callback_data": "true"},
        {"text": "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò", "callback_data": "false"},
        {"text": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è", "callback_data": "false"},
    ]},
    {"text": "–ö–∞–∫–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ü–∏–∫–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑?", "correct": "true", "answers": [
        {"text": "for", "callback_data": "true"},
        {"text": "while", "callback_data": "false"},
        {"text": "if", "callback_data": "false"},
        {"text": "switch", "callback_data": "false"},
    ]},
    {"text": "–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –≤ C++?", "correct": "true", "answers": [
        {"text": ":", "callback_data": "false"},
        {"text": ";", "callback_data": "true"},
        {"text": ".", "callback_data": "false"},
        {"text": ",", "callback_data": "false"},
    ]},
    {"text": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ C++?", "correct": "true", "answers": [
        {"text": "void —Ñ—É–Ω–∫—Ü–∏—è()", "callback_data": "true"},
        {"text": "function —Ñ—É–Ω–∫—Ü–∏—è()", "callback_data": "false"},
        {"text": "create —Ñ—É–Ω–∫—Ü–∏—è()", "callback_data": "false"},
        {"text": "func —Ñ—É–Ω–∫—Ü–∏—è()", "callback_data": "false"},
    ]},
    {"text": "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω?", "correct": "true", "answers": [
        {"text": "cout", "callback_data": "true"},
        {"text": "cin", "callback_data": "false"},
        {"text": "printf", "callback_data": "false"},
        {"text": "write", "callback_data": "false"},
    ]},
    {"text": "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: true –∏–ª–∏ false?", "correct": "true", "answers": [
        {"text": "bool", "callback_data": "true"},
        {"text": "int", "callback_data": "false"},
        {"text": "string", "callback_data": "false"},
        {"text": "double", "callback_data": "false"},
    ]},
    {"text": "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ 1?", "correct": "true", "answers": [
        {"text": "++", "callback_data": "true"},
        {"text": "--", "callback_data": "false"},
        {"text": "+=", "callback_data": "false"},
        {"text": "*=", "callback_data": "false"},
    ]},
    {"text": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è main() –≤ C++?", "correct": "true", "answers": [
        {"text": "–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "callback_data": "true"},
        {"text": "–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "callback_data": "false"},
        {"text": "–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω", "callback_data": "false"},
        {"text": "–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é", "callback_data": "false"},
    ]}
]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@botTimeWeb.message_handler(commands=['start'])
def startBot(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    first_mess = f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –∏–∑—É—á–µ–Ω–∏–µ–º —è–∑—ã–∫–∞ –°++ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å."
    markup = types.InlineKeyboardMarkup()
    button_hochutest = types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å', callback_data='test')
    button_nehochutest = types.InlineKeyboardButton(text='–û–±—É—á–∏—Ç—å—Å—è —Å –Ω—É–ª—è', callback_data='nol')
    button_help = types.InlineKeyboardButton(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='help')

    markup.add(button_hochutest, button_nehochutest, button_help)
    botTimeWeb.send_message(message.chat.id, first_mess, parse_mode='html', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@botTimeWeb.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
    show_help(message.chat.id)

def show_help(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    instruction = """
    üìö –ú–µ—Ç–æ–¥–∏—á–∫–∞-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

    1. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:
       - –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.
       - –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:
         - "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å" ‚Äî –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.
         - "–û–±—É—á–∏—Ç—å—Å—è —Å –Ω—É–ª—è" ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.

    2. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞:
       - –ë–æ—Ç –∑–∞–¥–∞—Å—Ç –≤–∞–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ C++.
       - –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏.
       - –í –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π.

    3. –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è:
       - –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –∏–ª–∏ –≤—ã–±–æ—Ä–∞ "–û–±—É—á–∏—Ç—å—Å—è —Å –Ω—É–ª—è" –±–æ—Ç –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.
       - –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ß—Ç–æ —Ç–∞–∫–æ–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏?" –∏–ª–∏ "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ü–∏–∫–ª—ã?".

    4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞:
       - –ë–æ—Ç –æ–±—ä—è—Å–Ω—è–µ—Ç —Ç–µ–º—ã, –ø–æ–º–æ–≥–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
       - –í—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω—è—Ç—å: "–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ" –∏–ª–∏ "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ".

    5. –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π:
       - –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –±–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É: "–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ —Ñ—É–Ω–∫—Ü–∏–∏".
       - –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.

    üöÄ –°–æ–≤–µ—Ç—ã:
    - –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ.
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.
    """
    markup = types.InlineKeyboardMarkup()
    button_start = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å', callback_data='start')
    button_test = types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', callback_data='test')
    button_learn = types.InlineKeyboardButton(text='–û–±—É—á–∏—Ç—å—Å—è —Å –Ω—É–ª—è', callback_data='nol')
    markup.add(button_start, button_test, button_learn)
    botTimeWeb.send_message(chat_id, instruction, parse_mode='Markdown', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@botTimeWeb.callback_query_handler(func=lambda call: True)
def handle_query(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    user_id = call.from_user.id
    if call.data == 'test':
        current_question_index[user_id] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        user_status[user_id] = 'testing'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_scores[user_id] = 0  # –°–±—Ä–æ—Å –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        ask_question(call.message.chat.id, user_id)
    elif call.data == 'nol':
        user_status[user_id] = 'ready'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è
        botTimeWeb.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è! –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    elif call.data == 'marat':
        user_status[user_id] = 'ready'
    elif call.data == 'help':
        show_help(call.message.chat.id)
    elif call.data == 'start':
        startBot(call.message)
    elif call.data in ['true', 'false']:
        check_answer(call)

def ask_question(chat_id, user_id):
    """–ó–∞–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
    index = current_question_index.get(user_id, 0)
    if index < len(questions):
        question = questions[index]
        text = question["text"]
        markup = types.InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        for answer in question["answers"]:
            markup.add(types.InlineKeyboardButton(text=answer["text"], callback_data=answer["callback_data"]))

        botTimeWeb.send_message(chat_id, text, parse_mode='html', reply_markup=markup)
    else:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
        result = user_scores[user_id]
        result_test = define_level(result)
        botTimeWeb.send_message(chat_id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result} / {len(questions)}")
        botTimeWeb.send_message(chat_id, result_test)

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
        markup = types.InlineKeyboardMarkup()
        button_obuchenijemarata = types.InlineKeyboardButton(text='–ù–ê–ß–ê–¢–¨ –û–ë–£–ß–ï–ù–ò–ï', callback_data='marat')
        markup.add(button_obuchenijemarata)
        botTimeWeb.send_message(chat_id, "–ö–†–ê–°–ê–í–ê –ú–ê–†–ê–¢, —Ç—ã –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—á–∏–Ω–∞–π –æ–±—É—á–µ–Ω–∏–µ", parse_mode='html', reply_markup=markup)

def check_answer(call):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."""
    user_id = call.from_user.id
    index = current_question_index.get(user_id, 0)

    if index >= len(questions):
        botTimeWeb.send_message(call.message.chat.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        botTimeWeb.send_message(call.message.chat.id, define_level(user_scores[user_id]))
        return

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    botTimeWeb.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    correct_answer = questions[index]["correct"]
    if call.data == correct_answer:
        botTimeWeb.send_message(call.message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        user_scores[user_id] += 1
    else:
        botTimeWeb.send_message(call.message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question_index[user_id] += 1
    ask_question(call.message.chat.id, user_id)

def define_level(correctotveti):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
    if correctotveti <= 3:
        return "–í—ã –Ω–æ–≤–∏—á–æ–∫"
    elif 4 <= correctotveti <= 6:
        return "–í—ã –∑–Ω–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ, –Ω–æ –≤—ã –¥–∞–ª–µ–∫–æ –Ω–µ –í–∏—Ç–∞–ª–∏–∫ –ë—É—Ç–µ—Ä–∏–Ω"
    elif 7 <= correctotveti <= 8:
        return "–í—ã –º–Ω–æ–≥–æ –∑–Ω–∞–µ—Ç–µ, –Ω–æ –µ—Å—Ç—å –µ—â—ë –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å"
    elif correctotveti >= 9:
        return "–í—ã –≤—Å—ë –∑–Ω–∞–µ—Ç–µ! –î–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ò–ò –≤—ã–¥–∞—Å—Ç –≤–∞–º —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@botTimeWeb.message_handler(content_types=['text'])
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    if user_status.get(user_id) == 'ready':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
        user_message = f"–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ó–ê 4 –ê–ë–ó–ê–¶–ê. {message.text}"
        botTimeWeb.send_message(message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        try:
            with GigaChat(credentials="YTdlZWNhNmEtNmIyMC00ZmYwLThjNWYtMWIzZmUyZDNiOTAyOmQyMDQxNTRjLTNlOGYtNGFmNy1iOTFmLTU0NGE1OGFjMjg1Yg==", verify_ssl_certs=False) as giga:
                response = giga.chat(user_message)
                bot_reply = response.choices[0].message.content
                bot_reply = bot_reply.replace('###', '')
                botTimeWeb.send_message(message.chat.id, bot_reply, parse_mode='Markdown')
        except Exception as e:
            botTimeWeb.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    else:
        botTimeWeb.send_message(message.chat.id, "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    try:
        botTimeWeb.polling(none_stop=True, interval=0)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")